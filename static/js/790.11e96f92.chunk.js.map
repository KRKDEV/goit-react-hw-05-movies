{"version":3,"file":"static/js/790.11e96f92.chunk.js","mappings":"mLACA,EAAyB,uB,SCEZA,EAAS,WACpB,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,OAAO,OACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,gKCjBD,EAA6B,2BAA7B,EAA4E,kCAA5E,EAAgI,gCAAhI,EAA+K,6BAA/K,EAA2N,6B,SCwF3N,EAlFe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAO,4DANF,mCAME,kBAAyEJ,GAEhFK,EAAY,mCAAG,WAAMC,GAAN,4EACnBH,GAAa,GACbG,EAAMC,iBACQ,KAAVP,EAHe,uBAIjBG,GAAa,GAJI,kBAKVK,IAAAA,OAAAA,KAAqB,kCALX,uBAOOC,MAAML,GAC7BM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,qBAAsBF,EAAtC,IATK,UAUgB,KAH7BG,EAPa,QAUHC,QAAQC,OAVL,wBAWjBhB,GAAa,GAXI,kBAYVK,IAAAA,OAAAA,QAAwB,8BAZd,QAcfS,GACFd,GAAa,IACPe,GAFS,OAEKD,EAAYC,UACxBE,KAAI,SAAAC,GAAK,MAAK,CACpBC,MAAOD,EAAMC,MACbC,GAAIF,EAAME,GACVC,YAAaH,EAAMG,YAHJ,IAKjBN,EAAQO,SAAQ,SAAAC,GACd5B,EAAO6B,KAAK,CACVC,QAASF,EAAOH,GAChBM,WAAYH,EAAOJ,MACnBQ,YAAaJ,EAAOF,aAEvB,IACDhB,IAAAA,OAAAA,QAAwB,sBAExBA,IAAAA,OAAAA,MAAsB,sBA/BL,4CAAH,sDAuClB,OACE,6BACE,+CACA,kBAAMrB,UAAWC,EAAmB2C,SAAU1B,EAA9C,WACE,kBACE2B,KAAK,OACLC,YAAY,mCACZ9C,UAAWC,EACX8C,SAZa,SAAA5B,GACnBP,EAAU,IACVE,EAASK,EAAM6B,OAAOnC,MACvB,KAWK,mBAAQgC,KAAK,SAAS7C,UAAWC,EAAjC,wBAIF,eAAID,UAAWC,EAAf,SACGc,GACC,SAAChB,EAAA,EAAD,IAEkB,IAAlBY,EAAOqB,QACPrB,EAAOsB,KAAI,SAAAC,GAAK,OACd,eAAwBlC,UAAWC,EAAnC,UACE,UAAC,KAAD,CAAMgD,GAAE,kBAAaf,EAAMO,SAA3B,WACE,gBACES,IAAG,8CAAyChB,EAAMS,aAClDQ,IAAI,YAEN,uBAAIjB,EAAMQ,iBANLR,EAAMO,QADD,QAezB,C","sources":["webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.js","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\",\"loader__icon\":\"Loader_loader__icon__cxe1A\"};","import { Grid } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nexport const Loader = () => {\n  return (\n    <div className={css['loader']}>\n      <Grid\n        height=\"80\"\n        width=\"80\"\n        color=\"#f08080\"\n        ariaLabel=\"grid-loading\"\n        radius=\"12.5\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchform\":\"Movies_searchform__ysLsS\",\"searchform__input\":\"Movies_searchform__input__PHu0T\",\"searchform__btn\":\"Movies_searchform__btn__ONeMq\",\"search__list\":\"Movies_search__list__ODrJD\",\"search__card\":\"Movies_search__card__bfktp\"};","import { useState } from 'react';\nimport { Loader } from '../../components/Loader/Loader';\nimport { Link } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport css from './Movies.module.css';\n\nconst API_KEY = `5576770c01d63e1242c2c0a47f8d9a02`;\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`;\n\n  const handleSubmit = async event => {\n    setIsLoading(true);\n    event.preventDefault();\n    if (value === '') {\n      setIsLoading(false);\n      return Notiflix.Notify.info('You have to write movie title');\n    }\n    const movieSearch = await fetch(API_URL)\n      .then(response => response.json())\n      .catch(error => console.log('There was an error', error));\n    if (movieSearch.results.length === 0) {\n      setIsLoading(false);\n      return Notiflix.Notify.failure('Could not find any movies');\n    }\n    if (movieSearch) {\n      setIsLoading(false);\n      const results = [...movieSearch.results];\n      results.map(movie => ({\n        title: movie.title,\n        id: movie.id,\n        poster_path: movie.poster_path,\n      }));\n      results.forEach(result => {\n        movies.push({\n          movieId: result.id,\n          movieTitle: result.title,\n          moviePoster: result.poster_path,\n        });\n      });\n      Notiflix.Notify.success('Found some movies');\n    } else {\n      Notiflix.Notify.error('There was an error');\n    }\n  };\n\n  const handleChange = event => {\n    setMovies([]);\n    setValue(event.target.value);\n  };\n  return (\n    <main>\n      <h1>Search for movies</h1>\n      <form className={css['searchform']} onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Write a movie title to search...\"\n          className={css['searchform__input']}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className={css['searchform__btn']}>\n          Search\n        </button>\n      </form>\n      <ul className={css['search__list']}>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          movies.length !== 0 &&\n          movies.map(movie => (\n            <li key={movie.movieId} className={css['search__card']}>\n              <Link to={`/movies/${movie.movieId}`}>\n                <img\n                  src={`https://www.themoviedb.org/t/p/w500/${movie.moviePoster}`}\n                  alt=\"poster\"\n                />\n                <p>{movie.movieTitle}</p>\n              </Link>\n            </li>\n          ))\n        )}\n      </ul>\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["Loader","className","css","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible","useState","movies","setMovies","value","setValue","isLoading","setIsLoading","API_URL","handleSubmit","event","preventDefault","Notiflix","fetch","then","response","json","catch","error","console","log","movieSearch","results","length","map","movie","title","id","poster_path","forEach","result","push","movieId","movieTitle","moviePoster","onSubmit","type","placeholder","onChange","target","to","src","alt"],"sourceRoot":""}